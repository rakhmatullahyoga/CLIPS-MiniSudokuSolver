package minisudokux;

/**
 * @author
 * Kelompok 7 Tugas Besar 1 IF3170
 * 1. Chrestella Stephanie - 13512005
 * 2. Linda Sekawati - 13512029
 * 3. Muntaha Ilmi - 13512048
 * 4. Rakhmatullah Yoga Sutrisna - 13512053
 * 5. William Stefan Hartono - 13512098
 */
import CLIPSJNI.*;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

public class MiniSudoku extends javax.swing.JFrame implements FocusListener, KeyListener{

    // Creates new form MiniSudoku
    
    Thread executionThread;
    Environment clips;
    
    // puzzle sudoku
    int custom[][][] = new int[6][2][3];
    int sample1[][][] = new int[6][2][3];
    int sample2[][][] = new int[6][2][3];
    int sample3[][][] = new int[6][2][3];
    int mode;
    
    boolean solved = false;
    boolean isExecuting = false;
    
    public MiniSudoku() {
        super("Mini Sudoku Solver");
    
        // inisiasi puzzle
        for(int group = 0; group < 6; group++) {
            for(int row = 0; row < 2; row++) {
                for(int col = 0; col < 3; col ++) {
                    sample1[group][row][col] = 0;
                    sample2[group][row][col] = 0;
                    sample3[group][row][col] = 0;
                    custom[group][row][col] = 0;
                }
            }
        }
        sample1[1][0][2] = 2;
        sample1[1][1][2] = 4;
        sample1[3][0][0] = 5;
        sample1[2][1][1] = 5;
        sample1[2][1][2] = 6;
        sample1[3][1][1] = 3;
        sample1[4][0][0] = 5;
        sample1[5][1][0] = 1;
        
        sample2[0][0][1] = 2;
        sample2[1][0][1] = 5;
        sample2[1][1][0] = 2;
        sample2[2][0][2] = 1;
        sample2[3][0][0] = 5;
        sample2[3][1][2] = 3;
        sample2[4][0][2] = 3;
        sample2[4][1][0] = 6;
        sample2[5][1][1] = 4;
        
        sample3[0][0][2] = 1;
        sample3[1][1][0] = 1;
        sample3[1][1][1] = 3;
        sample3[1][1][2] = 5;
        sample3[2][0][1] = 6;
        sample3[3][0][0] = 4;
        sample3[3][0][2] = 2;
        sample3[2][1][0] = 4;
        sample3[4][0][0] = 3;
        sample3[5][1][1] = 6;
        
        initComponents();
        mode=0;
        customButton.setSelected(true);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        super.setLocation(dim.width/2-super.getSize().width/2, dim.height/2-super.getSize().height/2-20);
        
        // inisiasi clips environment
        clips = new Environment();
        clips.load("sudoku.clp");
        clips.load("solve.clp");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainGrid = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        techniquesButton = new javax.swing.JButton();
        customButton = new javax.swing.JRadioButton();
        sample3Button = new javax.swing.JRadioButton();
        sample2Button = new javax.swing.JRadioButton();
        sample1Button = new javax.swing.JRadioButton();
        clearButton = new javax.swing.JButton();
        solveButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        GridLayout theLayout = new GridLayout(3,2);
        theLayout.setHgap(-1);
        theLayout.setVgap(-1); 

        mainGrid.setLayout(theLayout);   
        mainGrid.setOpaque(true);
        
        JTable theSubGrid;
        int r, c;

      /*=================================================*/
      /* Create a renderer based on the default renderer */
      /* that will center the text within the cell.      */
      /*=================================================*/
      
        DefaultTableCellRenderer renderer = 
        new DefaultTableCellRenderer()
        {
            public Component getTableCellRendererComponent(
              JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column)
              {
               Component comp = super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
               if (comp instanceof JLabel)
                 { 
                  ((JLabel) comp).setHorizontalAlignment(JLabel.CENTER); 
                  if (value instanceof String)
                    { 
                     if ("?".equals(value))
                       { ((JLabel) comp).setForeground(Color.red); }
                     else if (((String) value).length() > 1)
                       { ((JLabel) comp).setForeground(Color.green.darker()); }
                     else
                       { ((JLabel) comp).setForeground(Color.black); }
                    }
                 }
               return comp;
              }
        };

        /*========================================*/
        /* Create each of the nine 3x3 grids that */
        /* will go inside the main sudoku grid.   */
        /*========================================*/

        for (r = 0; r < 2; r++)
        {
            for (c = 0; c < 3; c++)
            {
            theSubGrid = 
               new JTable(2,3)
                 {
                  public boolean isCellEditable(int rowIndex,int vColIndex) 
                    { return false; }
                 };
            
            theSubGrid.setRowSelectionAllowed(false);
            theSubGrid.setShowGrid(true);
            theSubGrid.setRowHeight(25);
            theSubGrid.setGridColor(Color.black);
            theSubGrid.setBorder(BorderFactory.createLineBorder(Color.black,2));     
            theSubGrid.setDefaultRenderer(Object.class,renderer);

            theSubGrid.addFocusListener(this);
            theSubGrid.addKeyListener(this);
                                                                                            
            TableColumn column = null;
            for (int i = 0; i < 3; i++) 
              {
               column = theSubGrid.getColumnModel().getColumn(i);
               column.setMaxWidth(25);
              }

            mainGrid.add(theSubGrid);
            }
        }

        techniquesButton.setText("Techniques");
        techniquesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                techniquesButtonActionPerformed(evt);
            }
        });

        customButton.setText("Custom");
        customButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButtonActionPerformed(evt);
            }
        });

        sample3Button.setText("Sample 3");
        sample3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sample3ButtonActionPerformed(evt);
            }
        });

        sample2Button.setText("Sample 2");
        sample2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sample2ButtonActionPerformed(evt);
            }
        });

        sample1Button.setText("Sample 1");
        sample1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sample1ButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear Sudoku");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        solveButton.setText("Solve Sudoku");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customButton)
                    .addComponent(sample1Button)
                    .addComponent(sample2Button)
                    .addComponent(sample3Button))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(techniquesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(solveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sample1Button)
                    .addComponent(solveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sample2Button)
                    .addComponent(clearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sample3Button)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customButton)
                    .addComponent(techniquesButton))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(mainGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(mainGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButtonActionPerformed
        sample1Button.setSelected(false);
        sample2Button.setSelected(false);
        sample3Button.setSelected(false);
        customButton.setSelected(true);
        initializePuzzle(custom);
        mode=0;
        solved=false;
        solveButton.setEnabled(true);
    }//GEN-LAST:event_customButtonActionPerformed

    private void sample3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sample3ButtonActionPerformed
        sample1Button.setSelected(false);
        sample2Button.setSelected(false);
        sample3Button.setSelected(true);
        customButton.setSelected(false);
        initializePuzzle(sample3);
        mode=3;
        solveButton.setEnabled(true);
    }//GEN-LAST:event_sample3ButtonActionPerformed

    private void sample2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sample2ButtonActionPerformed
        sample1Button.setSelected(false);
        sample2Button.setSelected(true);
        sample3Button.setSelected(false);
        customButton.setSelected(false);
        initializePuzzle(sample2);
        mode=2;
        solveButton.setEnabled(true);
    }//GEN-LAST:event_sample2ButtonActionPerformed

    private void sample1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sample1ButtonActionPerformed
        sample1Button.setSelected(true);
        sample2Button.setSelected(false);
        sample3Button.setSelected(false);
        customButton.setSelected(false);
        initializePuzzle(sample1);
        mode=1;
        solveButton.setEnabled(true);
    }//GEN-LAST:event_sample1ButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        solveButton.setEnabled(true);
        solved = false;
        switch(mode) {
            case 0:
                initializePuzzle(custom);
                break;
            case 1:
                initializePuzzle(sample1);
                break;
            case 2:
                initializePuzzle(sample2);
                break;
            case 3:
                initializePuzzle(sample3);
                break;
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        String buff=new String();
        buff+="(defrule grid-values\n";
        buff+="?f <- (phase grid-values)\n";
        buff+="=>\n";
        buff+="(retract ?f)\n";
        buff+="(assert (phase expand-any))\n";
        buff+="(assert (size 3))\n";

         /*======================================*/
         /* Remember the initial starting values */
         /* of the puzzle for the reset command. */
         /*======================================*/

         Object activeMatriks[][][] = new Object[6][2][3];
         for (int group = 0; group < 6; group++)
           {
            JTable theTable = (JTable) mainGrid.getComponent(group);
            int rowGroup = group / 2;
            int colGroup = group % 2;
            for (int row = 0; row < 2; row++)
              {
               for (int col = 0; col < 3; col++)
                 { 
                  activeMatriks[group][row][col] = theTable.getValueAt(row,col); 
                  
                  String assertStr;
                  
                  assertStr = "(possible (row " + (row + (rowGroup * 2) + 1) + ") " +
                                        "(column " + (col + (colGroup * 3) + 1) + ") ";
                                        
                  if ((activeMatriks[group][row][col] == null) ||
                      (activeMatriks[group][row][col].equals("")))
                    { assertStr = assertStr + "(value any) "; }
                  else
                    { assertStr = assertStr + "(value " + activeMatriks[group][row][col] + ") "; }
                  assertStr = assertStr  + "(group " + (group + 1) + ") " +
                                        "(id " + ((group * 6) + (row * 3) + col + 1) + ") ";  
                  if ((row + (rowGroup * 2) + 1)==(col + (colGroup * 3) + 1)) {
                      assertStr = assertStr + "(diagonal 1))";
                  }
                  else if ((row + (rowGroup * 2) + 1)+(col + (colGroup * 3) + 1)==7) {
                      assertStr = assertStr + "(diagonal 2))";
                  }
                  else {
                      assertStr = assertStr + "(diagonal 3))";
                  }
                  buff+="(assert "+assertStr+")\n";
                 }         
              }
              buff+="\n";
           }
         buff+=")";
         clips.build(buff);
         clips.reset();

         /*===================================*/
         /* Update the status of the buttons. */
         /*===================================*/
         
         clearButton.setEnabled(false);
         solveButton.setEnabled(false);
         techniquesButton.setEnabled(false);
         
         /*===================*/
         /* Solve the puzzle. */
         /*===================*/

         runSudoku();        
    }//GEN-LAST:event_solveButtonActionPerformed

    private void techniquesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_techniquesButtonActionPerformed
         String evalStr;
         String messageStr = "<html><p style=\"font-size:95%\">";
         
         evalStr = "(find-all-facts ((?f technique)) TRUE)";
         
         PrimitiveValue pv = clips.eval(evalStr);
         int tNum = 0;
        try {
            tNum = pv.size();
        } catch (Exception ex) {
            Logger.getLogger(MiniSudoku.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         for (int i = 1; i <= tNum; i++)
           {
             try {
                 evalStr = "(find-fact ((?f technique-employed)) " + "(eq ?f:rank " + i + "))";
                 pv = clips.eval(evalStr);
                 if (pv.size() == 0) continue;
                 pv = pv.get(0);
                 messageStr = messageStr + pv.getFactSlot("rank").intValue() + ". " + pv.getFactSlot("reason").stringValue() + "<br>";
             } catch (Exception ex) {
                 Logger.getLogger(MiniSudoku.class.getName()).log(Level.SEVERE, null, ex);
             }
           }
         JOptionPane.showMessageDialog(this,messageStr,"SolutionTechniques",JOptionPane.PLAIN_MESSAGE);        
    }//GEN-LAST:event_techniquesButtonActionPerformed
    
    private boolean isPuzzValid(int[][][] in){
    	boolean fl=true;
    	for (int group=0;((group<6)&&fl);group++){
    		for (int row=0;((row<2)&&fl);row++){
    			for (int col=0;((col<3)&&fl);col++){
    				if (in[group][row][col]!=0){
    					//check 1 group
    					for (int r=0;r<2;r++){
    						for (int c=0;c<3;c++){
    							if (((r!=row)||(c!=col))&&(in[group][r][c]==in[group][row][col])){
    								fl=false;
    							}
    						}
    					}
    					//check col
    					for(int g=(group%2);g<6;g+=2) {
    						for(int r=0;r<2;r++) {
    							if (((g!=group)||(r!=row))&&(in[g][r][col]==in[group][row][col])){
    								fl=false;
    							}
    						}
    					}
    					//check row
    					for(int g=0;g<2;g++) {
    						for(int c=0;c<3;c++) {
    							if ((((g-(g%2))!=group)||(c!=col))&&(in[g-g%2][row][c]==in[group][row][col])){
    								fl=false;
    							}
    						}
    					}
    				}
    			}
    		}
    	}
    	return fl;
    }
    
    final JFileChooser fc = new JFileChooser("..");
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		//file chooser
		if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
			//init
			int tmp[][][] = new int[6][2][3];
			for(int group = 0; group < 6; group++) {
				for(int row = 0; row < 2; row++) {
					for(int col = 0; col < 3; col ++) {
						tmp[group][row][col] = 0;
					}
				}
			}
			//load file
			Scanner scanner = null;
			try {
				scanner = new Scanner(fc.getSelectedFile());
				int x=0;
				char c=' ';
				for(int groupr=0;groupr<3;groupr++) {
					for(int row=0;row<2;row++) {
						for(int groupc=0;groupc<2;groupc++) {
							for(int col=0;col<3;col++) {
								c=(char)scanner.next().charAt(0);
								if (c!='*'){
									x=(int)c-'0';
									tmp[groupr*2+groupc][row][col]=x;
								} else {
									x=0;
									tmp[groupr*2+groupc][row][col]=0;
								}
							}
						}
					}
				}
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if (isPuzzValid(tmp)){
				sample1Button.setSelected(false);
				sample2Button.setSelected(false);
				sample3Button.setSelected(false);
				customButton.setSelected(true);
				initializePuzzle(tmp);
				mode=0;
				solved=false;
				solveButton.setEnabled(true);
			} else {
			     JOptionPane.showMessageDialog(this,"Puzzle tidak valid","Warning",JOptionPane.ERROR_MESSAGE);
			}
		} else {
			//do nothing
		}
    }//GEN-LAST:event_jButton1ActionPerformed

    public void initializePuzzle(int matriks[][][]){
        for(int group=0; group<6; group++) {
            JTable theTable = (JTable) mainGrid.getComponent(group);
            for(int row=0; row<2; row++) {
                for(int col=0; col<3; col++) {
                    if(matriks[group][row][col]!=0) {
                        theTable.setValueAt(matriks[group][row][col], row, col);
                    }
                    else {
                        theTable.setValueAt("", row, col);
                    }
                }
            }
        }
    }

   /*************/
   /* runSudoku */
   /*************/  
   public void runSudoku()
     {
      Runnable runThread = 
         new Runnable()
           {
            @Override
            public void run()
              {
               clips.run();
               
               SwingUtilities.invokeLater(
                  new Runnable()
                    {
                     public void run()
                       {
                        try 
                          { updateGrid(); }
                        catch (Exception e)
                          { e.printStackTrace(); }
                       }
                    });
              }
           };
      
      isExecuting = true;
      
      executionThread = new Thread(runThread);
      
      super.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
         
      executionThread.start();
     }
    private void updateGrid() throws Exception
     { 

      /*===================================*/
      /* Retrieve the solution from CLIPS. */
      /*===================================*/

      Object activeMatriks[][][] = new Object[6][2][3];
      for(int group=0; group<6; group++) {
            JTable theTable = (JTable) mainGrid.getComponent(group);
            int rowGroup = group / 2;
            int colGroup = group % 2;
            for(int row=0; row<2; row++) {
                for(int col=0; col<3; col++) {
                    activeMatriks[group][row][col] = theTable.getValueAt(row,col);
                    if ((activeMatriks[group][row][col] != null) && (!activeMatriks[group][row][col].equals("")))
                    { continue; }
                    String evalStr = "(find-all-facts ((?f possible)) " + "(and (eq ?f:row " + (row + (rowGroup * 2) + 1) + ") " + "(eq ?f:column " + (col + (colGroup * 3) + 1) + ")))";
                    PrimitiveValue pv = clips.eval(evalStr);
                    if (pv.size() != 1) continue;
                    PrimitiveValue fv = pv.get(0);
                    theTable.setValueAt(" " + fv.getFactSlot("value") + " ",row,col);
                }
            }
        }
      
      /*===============================================*/
      /* Any cells that have not been assigned a value */
      /* are given a '?' for their content.            */
      /*===============================================*/
         
      for (int group = 0; group < 6; group++)
        {
         JTable theTable = (JTable) mainGrid.getComponent(group);

         for (int row = 0; row < 2; row++)
           {
            for (int col = 0; col < 3; col++)
              { 
               if ((theTable.getValueAt(row,col) == null) ||
                   (theTable.getValueAt(row,col).equals("")))
                 { theTable.setValueAt("?",row,col);  }
              }         
           }
        }

      /*===================================*/
      /* Update the status of the buttons. */
      /*===================================*/

      super.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
         
      solved = true;
      clearButton.setEnabled(true);
      solveButton.setEnabled(false);
      techniquesButton.setEnabled(true);
           
      executionThread = null;
      
      isExecuting = false;
     }

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniSudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MiniSudoku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JRadioButton customButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mainGrid;
    private javax.swing.JRadioButton sample1Button;
    private javax.swing.JRadioButton sample2Button;
    private javax.swing.JRadioButton sample3Button;
    private javax.swing.JButton solveButton;
    private javax.swing.JButton techniquesButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
        if(mode==0) {
            JTable theTable = (JTable) e.getComponent();
            int row = theTable.getSelectedRow();
            int col = theTable.getSelectedColumn();

            /*=================================*/
            /* Cells can't be change while the */
            /* puzzle is in solution state.    */
            /*=================================*/

            if (solved || isExecuting) return;

            /*=================================================*/
            /* If a cell isn't selected, ignore the typed key. */
            /*=================================================*/

            if ((row == -1) || (col == -1)) return;

            /***************************/
            /* Retrieve the typed key. */
            /***************************/

            char theChar = e.getKeyChar();

            /*=======================================================*/
            /* A backspace removes the value from the selected cell. */
            /*=======================================================*/

            if (theChar == '\b')
              {
               theTable.setValueAt("",row,col); 
               return;
              }

            /*=========================================================*/
            /* Any character other than the digits 1 to 9 is invalid.  */
            /*=========================================================*/

            if (!(('1'<=theChar)&&(theChar<='6'))){
		    	 Toolkit.getDefaultToolkit().beep();
		    	 return;
            }
            
            /*=====================================*/  
            /* Set the value of the selected cell. */
            /*=====================================*/  
            
            theTable.setValueAt((int)theChar-'0',row,col); 
            /* Remove any other occurences of this digit */
            /* from the same 2x3 grid.                   */
            for (int r = 0; r < 2; r++){
        		for (int c = 0; c < 3; c++){
	   				if (((r != row) || (c != col))&&(theTable.getValueAt(row,col).equals(theTable.getValueAt(r,c)))){
	   					theTable.setValueAt("",r,c);
	   				}
    			}
            }
        } else {
            Toolkit.getDefaultToolkit().beep();
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        JTable theTable = (JTable) e.getComponent();
        int r = theTable.getEditingRow();
        int c = theTable.getEditingColumn();

        /*====================================================*/
        /* If a cell wasn't being edited, do nothing further. */
        /*====================================================*/

        if ((r == -1) || (c == -1)) return;

        /*========================*/
        /* Stop editing the cell. */
        /*========================*/

        TableCellEditor tableCellEditor = theTable.getCellEditor(r,c);
        tableCellEditor.stopCellEditing();

        /*=================================*/
        /* Clear selections for the table. */
        /*=================================*/

        theTable.clearSelection();
    }
}
